"""
Django settings for cofi project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
# BASE_DIR = Path(__file__).resolve().parent.parent # Remove this
BASE_DIR = Path(__file__).resolve().parent.parent # Add this


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-hh*zsbm%@-#+2*sciwyk68-f#p6nouj0v!78^)e9alx68v4qv#'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'home',
    'accounts',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites', # needed for allauth
    'allauth', # Add these for allauth
    'allauth.account', # Add these for allauth
    'allauth.socialaccount', # Add these for social login
    'allauth.socialaccount.providers.google', # For Google login
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware', # Add this for allauth
    'django.middleware.locale.LocaleMiddleware',
]

ROOT_URLCONF = 'cofi.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "templates")], # where to search for templates
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n' # Diese Zeile hinzufügen falls sie fehlt
            ],
        },
    },
]

WSGI_APPLICATION = 'cofi.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# Construct the database URL dynamically
DB_ENGINE = os.environ.get("DB_ENGINE", "mysql")  # You can change this if you use a different database
DB_USER = os.environ.get("DB_USER", "root")  # Default to "root" if not set
DB_PASSWORD = os.environ.get("DB_PASSWORD", "testpw")  # Default to "example"
DB_HOST = os.environ.get("DB_HOST", "db_dev")  # Default to "db_dev"
DB_PORT = os.environ.get("DB_PORT", "3306")  # Default to "3306"
DB_NAME = os.environ.get("DB_DATABASE", "conscious_fit_dev")  # Default to "cofi"

DB_TEST_NAME = os.environ.get("DB_TEST_DATABASE", "conscious_fit_dev")

DATABASE_URL = f"{DB_ENGINE}://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}"

DATABASES = {
    "default": dj_database_url.parse(DATABASE_URL)
}
if "DB_ENGINE" in os.environ:
    if os.environ["DB_ENGINE"] == "mysql":
        DATABASES["default"]["TEST"] = {
            "NAME": DB_TEST_NAME
        }


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

USE_I18N = True
LANGUAGE_CODE = 'en'
LANGUAGES = [
    ('en', 'English'),
    ('pt-br', 'Português'),
    ('de', 'Deutsch'),
    # ... weitere Sprachen
]

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

LOCALE_PATHS = [
   os.path.join(BASE_DIR, 'locale'),
]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'
# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, "home/static"),
# ]

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Authentication
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# Site ID for allauth
SITE_ID = 1

# allauth configuration
ACCOUNT_EMAIL_REQUIRED = True  # Makes email addresses required
ACCOUNT_USERNAME_REQUIRED = True  # requires a username
ACCOUNT_LOGIN_METHODS = ['username','email']  # Login with username or email
ACCOUNT_SESSION_REMEMBER = True  # Remember the user session
LOGIN_REDIRECT_URL = '/'  # url to redirect to after login
ACCOUNT_LOGOUT_REDIRECT_URL = '/'  # url to redirect to after logout

# Google login scope
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'online',
        }
    }
}
