services:
  # db_ally:
  #   image: mariadb:10.11.6  # Use the official MariaDB image
  #   env_file:
  #     - .env
  #   environment:
  #     MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
  #     MYSQL_DATABASE: ${DB_DATABASE}
  #     MYSQL_USER: ${DB_USER}
  #     MYSQL_PASSWORD: ${DB_PASSWORD}
  #     MYSQL_CHARACTER_SET: ${MYSQL_CHARACTER_SET}
  #     MYSQL_COLLATION_SERVER: ${MYSQL_COLLATION_SERVER}
  #   volumes:
  #     - ally_data:/var/lib/mysql
  #     - ./my.cnf:/etc/mysql/conf.d/my.cnf # Zum Testen, in Prod entfernen oder auf bestimmte Netzwerke beschränken, damit man direkt auf die Datenbnak zugreifen kann
  #   restart: unless-stopped
  #   ports:
  #     - "8040:3306"
  #   healthcheck:
  #     test: ["CMD", "mysql", "-u", "${DB_USER}", "-p${DB_PASSWORD}", "-e", "SELECT 1;"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3
  #   networks:
  #     - ally-network-system

  db_ally:
    image: postgres:15-alpine # Use a PostgreSQL image (adjust version as needed)
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${DB_USER} # PostgreSQL uses POSTGRES_USER
      POSTGRES_PASSWORD: ${DB_PASSWORD} # PostgreSQL uses POSTGRES_PASSWORD
      POSTGRES_DB: ${DB_DATABASE} # PostgreSQL uses POSTGRES_DB
    volumes:
      - ally_data_postgres:/var/lib/postgresql/data # PostgreSQL data directory
    restart: unless-stopped
    ports:
      - "8040:5432" # PostgreSQL's default port is 5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U${DB_USER} -d${DB_DATABASE} -t 2"] # PostgreSQL healthcheck
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ally-network-system

  openfoodfactsmongo:
    image: mongo
    restart: always
    volumes:
      - /home/heinrich/projects/openfootfacts_db:/dump # Zum einspielen der Daten aus der openfoodfacts datenbank
      - mongodb_data:/data/db # Mounten Sie das Volume in den Standard-Datenpfad von MongoDB
    ports:
      - "27017:27017"
    container_name: openfoodfacts-mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}
    networks:
      - ally-network-system

  backend_ally:
    build:
      context: .
      dockerfile: Dockerfile_python
    env_file:
      - .env
    ports:
      - "8041:8000"
    depends_on:
      db_ally:
        condition: service_healthy
    environment:
      - PYTHONPATH=/app
      - DATABASE_URL=mysql+pymysql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:3306/${DB_DATABASE}
      - SECRET_KEY=${SECRET_KEY}
    volumes:
      - ../../backend/app:/app  # Für Entwicklung
      - ../../.cache:/root/.cache
    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
    # restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - ally-network-system

  frontend_ally:
    build:
      context: .
      dockerfile: Dockerfile_django
    env_file:
      - .env
    ports:
      - "8042:8000"
    depends_on:
      # backend_djangotest:
      #   condition: service_healthy
      db_ally:
        condition: service_healthy
    volumes:
      - ../../frontend/ally:/app # For development
      # - ../frontend/ally_test:/app/test # For development
      - ../../.cache_ally:/root/.cache
    command: ["sh", "-c", "sleep 5 && while true; do pytest /app/home /app/recipes /app/ally /app/authentication --html=/app/tests/systemtestreport.html --self-contained-html; sleep 9; done"]
    # command: ["ls", "-la"]
    # command: ["sh", "entrypoint.sh"]
    restart: on-failure
    healthcheck:
        test: ["CMD", "curl", "-f", "http://localhost:8000/"]
        interval: 30s
        timeout: 10s
        retries: 3
    networks:
        - ally-network-system

volumes:
  # ally_data:
  ally_data_postgres:
  mongodb_data:

networks:
  ally-network-system:
    driver: bridge
